apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: monitoring
  namespace: argocd
spec:
  project: default
  source:
    repoURL: https://prometheus-community.github.io/helm-charts
    chart: kube-prometheus-stack
    targetRevision: 65.4.0              # pin a stable chart
    helm:
      releaseName: monitoring
      values: |
        # --- Prometheus (small footprint + persistence) ---
        prometheus:
          prometheusSpec:
            retention: 7d
            scrapeInterval: 30s
            evaluationInterval: 30s
            resources:
              requests: { cpu: 100m, memory: 300Mi }
              limits:   { cpu: 500m, memory: 1Gi }
            storageSpec:
              volumeClaimTemplate:
                spec:
                  storageClassName: nfs-csi        # your NFS SC
                  accessModes: [ "ReadWriteOnce" ]
                  resources:
                    requests:
                      storage: 10Gi

        # --- Grafana (Ingress via Traefik + TLS) ---
        grafana:
          enabled: true
          admin:
            existingSecret: grafana-admin          # create once (see note below)
            userKey: admin-user
            passwordKey: admin-password
          ingress:
            enabled: true
            ingressClassName: traefik
            annotations:
              traefik.ingress.kubernetes.io/router.entrypoints: web,websecure
              traefik.ingress.kubernetes.io/router.tls: "true"
              traefik.ingress.kubernetes.io/router.middlewares: kube-system-https-redirect@kubernetescrd
            hosts: [ dashboard.k8s ]
            tls:
              - secretName: wildcard-k8s-tls       # cert-manager should create this
                hosts: [ dashboard.k8s ]
          grafana.ini:
            server:
              root_url: https://dashboard.k8s
              serve_from_sub_path: false
          resources:
            requests: { cpu: 50m, memory: 120Mi }

        # --- Node exporter on every node (CPU/mem/disk/net) ---
        nodeExporter:
          resources:
            requests: { cpu: 20m, memory: 50Mi }

        # --- kube-state-metrics (cluster objects -> metrics) ---
        kubeStateMetrics:
          resources:
            requests: { cpu: 20m, memory: 60Mi }

        # (Optional) Disable Alertmanager if you don't want alerts yet
        # alertmanager:
        #   enabled: false
  destination:
    server: https://kubernetes.default.svc
    namespace: monitoring
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true